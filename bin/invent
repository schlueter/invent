#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');

var fs = require('fs');
var path = require('path');

var pkg = require('../package.json');
var version = pkg.version;

program
    .version(version)
    .usage('[options] [destination]')
    .option('-f, --force', 'force on non-empty destination')
    .parse(process.argv);

var destinationPath = program.args.shift() || '.';

var appName = (destinationPath !== '.') ? destinationPath : 'invent';

var cookbookPath = path.join(destinationPath, 'cookbooks');
var templatePath = path.join(__dirname, '..', 'templates');

(function createApplication(applicationPath) {
    isEmpty(applicationPath, function(empty){
        if (empty || program.force) {
            createApplicationAt(applicationPath);
        } else {
            program.confirm('destination folder is not empty, continue? (y/n) ', function(ok){
                if (ok) {
                    process.stdin.destroy();
                    createApplicationAt(applicationPath);
                } else {
                    abort('aborting', 1);
                }
            });
        }
    });
})(destinationPath);

/**
 * Create application at the given directory `applicationPath`.
 *
 * @param {String} applicationPath
 */

function createApplicationAt(applicationPath) {
    process.on('exit', function(code){
        if(code === 0) {
            console.log();
            console.log('   getting started :');
            console.log('     $ cd ' + applicationPath + ' && vagrant up');
            console.log('     $ vagrant ssh');
            console.log();
            console.log('   \x1b[36mstart inventing ;)\x1b[0m');
        }
    });

    mkdir(applicationPath, function(){
        writeTemplate('Vagrantfile');
        writeTemplate('package.json');
        writeTemplate('Berksfile');
    });
}

/**
 * Writes the specified templates
 *
 * @param {String} template
 */

function writeTemplate(template) {
    var templateContent = fs.readFileSync(path.join(templatePath, template), 'utf-8').replace('{appName}', appName);

    write(path.join(destinationPath, template), templateContent);
} 

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function isEmpty(path, fn) {
    fs.readdir(path, function(err, files){
        if (err && 'ENOENT' != err.code) {
            throw err;
        }
        fn(!files || !files.length);
    });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 * @param {String} mode
 */

function write(path, str, mode) {
    fs.writeFile(path, str, { mode: mode || 0666 });
    console.log('   \x1b[36mcreated\x1b[0m    : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, cb) {
    mkdirp(path, 0755, function(err){
        if (err) {
            throw err;
        }
        console.log('   \033[36mcreated\033[0m    : ' + path);
        cb && cb();
    });
}

/**
 * Abort everything
 *
 * @param {String} str
 * @param {Number} code
 */

function abort(str, code) {
    console.error(str);
    process.exit(code);
}
