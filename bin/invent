#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var tar = require('tar');

var os = require('os');
var fs = require('fs');
var path = require('path');
var https = require('https');
var zlib = require('zlib');

var pkg = require('../package.json');
var version = pkg.version;
var eol = os.EOL

program
  .version(version)
  .usage('[options] [dir]')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

var destinationPath = program.args.shift() || '.';
var cookbookPath = path.join(destinationPath, 'cookbooks');
var templatePath = path.join(__dirname, '..', 'templates');
var appName = path.basename(path.resolve(destinationPath));

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(destinationPath);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(directory) {
  process.on('exit', function(){
    console.log();
    console.log('   getting started :');
    console.log('     $ cd ' + directory + ' && vagrant up');
    console.log('     $ vagrant ssh');
    console.log();
    console.log('   \x1b[36mstart inventing ;)\x1b[0m');
    console.log();
  });

  mkdir(directory, function(){
    writeTemplates();
    downloadCookbooks();
  });
}

/**
 * Copies templates from templatePath into destinationPath
 *
 */

function writeTemplates() {
  fs.readdir(templatePath, function(err, files){
    if (err) {
      console.log(err);
    } else {
      files.forEach(function(name) {
        var templateContent = fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8').replace('{appName}', appName);
        write(path.join(destinationPath, name), templateContent);
      });
    } 
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) {
      throw err;
    }
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 * @param {String} mode
 */

function write(path, str, mode) {
  fs.writeFile(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreated\x1b[0m    : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) {
      throw err;
    }
    console.log('   \033[36mcreated\033[0m    : ' + path);
    fn && fn();
  });
}

/**
 * Download cookbooks specified in config/cookbooks.json and extract into 
 * destinationPath/cookbooks
 *
 */

function downloadCookbooks() {
  mkdir(path.join(destinationPath, 'cookbooks'));
  var cookbooks = require(path.join(__dirname, '..', 'config', 'cookbooks.json'));
  for(var book in cookbooks) {
    download(cookbooks[book], path.join(cookbookPath, book + '.tar.gz'), function(error, path) {
      if(!error) {
        extract(path, cookbookPath, function(extractError, _destination) {
          cleanup(_destination, path);
        });
      } else {
        console.log('error', error);
      }
    });
  }
}

function cleanup(source, destination) {  
  source = path.join(process.cwd(), cookbookPath, source);
  destination = path.join(process.cwd(), destination).replace('.tar.gz', '');
  fs.unlink(destination + '.tar.gz');
  if(fs.existsSync(source) && fs.statSync(source).isDirectory()) {
    fs.rename(source, destination, function(error) {
      if(error) {
        console.log('error', error);
      }
    });
  } else {
    console.log("SHITTTTT", source);
  }
}

/**
 * Extract a tar.gz file
 *
 * @param {String} source
 * @param {String} destination
 * @param {String} cb
 */
function extract(source, destination, cb) {
  var filename = '';
  fs.createReadStream(source)
    .pipe(zlib.createGunzip())
    .pipe(tar.Extract({ path : destination }))
    .on('error', function(error) { cb(error, destination); })
    .once('entry', function(entry) { filename = entry.path.substring(0, entry.path.length -1); })
    .on('end', function() { cb(null, filename); })
}

/**
 * Download a file (tar.gz) via https module
 *
 * @param {String} url
 * @param {String} path
 * @param {String} cb
 */
function download(url, path, cb) {
  https.get(url, function(response) {
    var data = [], dataLen = 0; 
    var headers = JSON.stringify(response.headers);
    switch(response.statusCode) {
      case 200 :
        var file = fs.createWriteStream(path);
        response.pipe(file);
        response.on('end', function() {
          console.log('   \033[36mdownloaded\033[0m : ' + path.replace('.tar.gz', ''));
          cb(null, path);
        });
        break;
      case 301 :
      case 302 :
      case 303 :
      case 307 :
        download(response.headers.location, path, cb);
        break;
      default :
        cb(new Error('Server responded with status code ' + response.statusCode), path);
    }
  })
  .on('error', function(err) {
    cb(err, null);
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
